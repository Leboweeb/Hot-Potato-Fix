[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/ui.lua"]'''
position = 'at'
pattern = '''
local new_mult_text = number_format(G.GAME.current_round.current_hand[e.config.type] or SMODS.Scoring_Parameters[e.config.type].default_value)
'''
payload = '''
local new_mult_text = number_format(G.GAME.current_round.current_hand[e.config.type] or G.GAME.current_round.current_hand.scores[e.config.type] or SMODS.Scoring_Parameters[e.config.type].default_value)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
position = 'at'
pattern = '''
G.FUNCS.SMODS_scoring_calculation_function = function(e)
    local first = false
    if not (e.config.current_scoring_calculation and e.config.current_scoring_calculation == G.GAME.current_scoring_calculation.key) then
'''
payload = '''
G.FUNCS.SMODS_scoring_calculation_function = function(e)
    local first = false
    if not (e.config.current_scoring_calculation and e.config.current_scoring_calculation == G.GAME.current_scoring_calculation.key) or G.bypass_scoring_ui then
'''
match_indent = true


[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
position = 'at'
pattern = '''
if operator and (type(G.GAME.current_scoring_calculation.colour) == 'function' or type(G.GAME.current_scoring_calculation.text) == 'function') then operator.UIBox:recalculate() end
'''
payload = '''
if operator and (type(G.GAME.current_scoring_calculation.colour) == 'function' or type(G.GAME.current_scoring_calculation.text) == 'function') or G.bypass_scoring_ui then operator.UIBox:recalculate() end
G.bypass_scoring_ui = nil
'''
match_indent = true


