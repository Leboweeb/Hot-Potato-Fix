[manifest]
version = "1.0.0"
dump_lua = true
priority = 0


[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''-- TARGET: evaluate your own general effects'''
position = 'after'
payload = '''
for q, a in ipairs(HPTN.Modification.obj_buffer) do
 local modi = HPTN.Modifications[a]
  local modif = card:calculate_modification(context, a)
    if modif then
     ret[modi] = modif
    end
end
'''
match_indent = true

# generate_UIBox_ability_table()
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.sticker or ((self.sticker_run and self.sticker_run~='NONE') and G.SETTINGS.run_stake_stickers)  then loc_vars = loc_vars or {}; loc_vars.sticker=(self.sticker or self.sticker_run) end"
position = "before"
match_indent = true
payload = '''
for k, v in ipairs(HPTN.Modification.obj_buffer) do
	if self.ability[v] and not HPTN.Modifications[v].hide_badge then
        badges[#badges+1] = v
    end
end'''

# generate_card_ui()
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v == 'eternal' then*"
match_indent = true
position = "before"
payload = '''
local sticker = HPTN.Modifications[v]
if sticker then
    local t = { key = v, set = 'Modification' }
    local res = {}
    if sticker.loc_vars and type(sticker.loc_vars) == 'function' then
        res = sticker:loc_vars(info_queue, card) or {}
        t.vars = res.vars or {}
        t.key = res.key or t.key
        t.set = res.set or t.set
    end
    info_queue[#info_queue+1] = t
end'''

# Add Modifications as a set to be localized here
[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''if _c.set == 'Other' then
        localize{type = 'other', key = _c.key, nodes = desc_nodes, vars = specific_vars or _c.vars}'''
position = 'after'
payload = '''
elseif _c.set == 'Modification' then
  localize{type = 'descriptions', key = _c.key, set = _c.set, nodes = desc_nodes, vars = specific_vars or _c.vars}
'''
match_indent = true

# Add Modification badge
[[patches]]
[patches.pattern]
target = '''functions/UI_definitions.lua'''
pattern = '''if AUT.badges then'''
position = 'before'
payload = '''
for k, v in pairs(HPTN.Modifications) do
  if card.ability[k] then
    SMODS.create_mod_badges(HPTN.Modifications[k], badges)
  end
end
'''
match_indent = true

# get_badge_colour()
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = 'return G.BADGE_COL[key] or {1, 0, 0, 1}'
position = 'before'
match_indent = true
payload = '''
for k, v in pairs(HPTN.Modifications) do
    G.BADGE_COL[k] = v.badge_colour
end'''