[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'game.lua'
position = 'after'
pattern = '''self.GAME.selected_back_key = selected_back'''
payload = '''
init_jtem(self.GAME)
'''
match_indent = true

[[patches]]
[patches.regex]
target = '''game.lua'''
position = 'at'
pattern = '''text = G\.VERSION'''
payload = '''text = G.VERSION:gsub('FULL', 'H0TP0T')'''

[[patches]]
[patches.pattern]
target = 'game.lua'
position = 'before'
pattern = '''if self.STATE == self.STATES.PLAY_TAROT then'''
payload = '''
if self.STATE == self.STATES.JTEM_PANDEMONIUM then
  PandemoniumGame.f.update(dt)
end

'''
match_indent = true

# Game:draw
[[patches]]
[patches.pattern]
target = 'game.lua'
position = 'after'
pattern = '''timer_checkpoint('uiboxes', 'draw')'''
payload = '''
if self.STATE == self.STATES.JTEM_PANDEMONIUM then
  PandemoniumGame.f.draw()
end

'''
match_indent = true

# I am so frustrated
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
position = 'at'
pattern = '''if G.GAME.blind then t[#t + 1] = { object = G.GAME.blind, scored_card = G.GAME.blind.children.animatedSprite } end'''
payload = '''if G.GAME.blind and G.GAME.blind.is and G.GAME.blind:is(Blind) then t[#t + 1] = { object = G.GAME.blind, scored_card = G.GAME.blind.children.animatedSprite } end'''
match_indent = true

# Draggable UIBoxes
[[patches]]
[patches.pattern]
target = 'engine/ui.lua'
position = 'before'
pattern = '''if args.config.can_collide == nil then '''
payload = '''
if args.config.draggable then
  self.states.drag.can = true
end
'''
match_indent = true

# Jukebox music is prioritized
[[patches]]
[patches.pattern]
target = '''functions/misc_functions.lua'''
pattern = '''if G.F_SOUND_THREAD then
    G.SOUND_MANAGER.channel:push(G.ARGS.push)'''
position = 'before'
payload = '''
if JTJukebox.CurrentlyPlaying and JTJukebox.ActuallyPlaying then
	desired_track = JTJukebox.ActuallyPlaying
	G.ARGS.push.desired_track = desired_track
end
if JTJukebox.Music[desired_track] and JTJukebox.Music[desired_track].discoverable and not JTJukebox.Music[desired_track].discovered then
  JTJukebox.Music[desired_track].discovered = true
  G.PROFILES[G.SETTINGS.profile]["hpot_discovered_tracks"] = G.PROFILES[G.SETTINGS.profile]["hpot_discovered_tracks"] or {}
  G.PROFILES[G.SETTINGS.profile]["hpot_discovered_tracks"][desired_track] = true
end
'''
match_indent = true


# make the hook hook properly i hope
[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''    if self.area then self.area:remove_card(self) end'''
position = 'before'
payload = '''
self.hp_area_back = self.area
'''
match_indent = true
[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''        if self.ability.d_size > 0 then
            G.GAME.round_resets.discards = G.GAME.round_resets.discards - self.ability.d_size'''
position = 'before'
payload = '''
if self.hp_area_back and not self.hp_area_back.REMOVED then
    SMODS.calculate_context{ hp_card_destroyed = true, card_being_destroyed = self, is_being_sold = self.HP_JTEM_IS_BEING_SOLD, area = self.hp_area_back }
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/ui.lua"]'''
pattern = '''{n=G.UIT.R, config={align = "cm", r = 0.1, colour = G.C.BLACK, emboss = 0.05}, nodes=deck_tables}, '''
position = 'before'
payload = '''
args.hp_misc_elements and args.hp_misc_elements() or nil,
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = '''                    G.GAME.voucher_restock = nil'''
position = 'after'
payload = '''
G.GAME.hp_jtem_already_requested_this_ante = nil
'''
match_indent = true

# We add the mod badge to mood stickers
# Taken from Paperback
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "badges.mod_set = nil"
position = "before"
match_indent = true
payload = '''
if card and card.ability then
  local key = hpot_has_mood(card)
  if key then
    SMODS.create_mod_badges(SMODS.Stickers[key], badges)
  end
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self.children.use_button = UIBox{'''
position = "before"
match_indent = true
payload = '''
--G.hpot_training_consumable_highlighted = nil
if self.ability.hpot_train_increase and self.highlighted and self.ability.consumeable then
  -- set this as the highlighted consumeable
  G.hpot_training_consumable_highlighted = self
  --print("hi")
end
if self.ability.set == "Joker" and not self.ability.hp_jtem_mood and G.jokers and self.area == G.jokers and PissDrawer.Shop.active_tab ~= 'hotpot_shop_tab_hotpot_tname_toggle_reforge' then
  if self.children.hpot_train_button then self.children.hpot_train_button:remove() end
  self.children.hpot_train_button = UIBox{
    definition = hpot_joker_train_button_definition(self),
    config = {
      align = "bmi",
      offset ={x=0,y=0.7},
      parent = self
    }
  }
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self.children.use_button:remove()'''
position = "before"
match_indent = true
payload = '''
if self.ability.consumeable then
  G.hpot_training_consumable_highlighted = nil
end
if self.children.hpot_train_button then
  self.children.hpot_train_button:remove()
  self.children.hpot_train_button = nil
end
'''

# Add event scenario description for the collection
[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''if first_pass and not (_c.set == 'Edition') and badges then'''
position = 'before'
payload = '''
if first_pass and card and card.hpot_event_key then
  local event = HotPotato.EventScenarios[card.hpot_event_key]
  local t = { key = card.hpot_event_key, set = 'EventScenarios' }
  local res = {}
  if event.collection_loc_vars and type(event.collection_loc_vars) == 'function' then
    res = event:collection_loc_vars(info_queue) or {}
    t.vars = res.vars or {}
    t.key = res.key or t.key
    t.set = res.set or t.set
  end
  info_queue[#info_queue+1] = t
end
if first_pass and card and card.hpot_jukebox_none then
  info_queue[#info_queue+1] = { key = "hpot_no_track", set = "Other" }
elseif first_pass and card and card.hpot_jukebox_key then
  local event = JTJukebox.Music[card.hpot_jukebox_key]
  local t = { key = card.hpot_jukebox_key, set = 'hpot_jukebox' }
  local res = {}
  if event.discoverable and not event.discovered then
    t = { key = "hpot_undiscovered_track", set = "Other" }
  end
  if event.collection_loc_vars and type(event.collection_loc_vars) == 'function' then
    res = event:collection_loc_vars(info_queue) or {}
    t.vars = res.vars or {}
    t.key = res.key or t.key
    t.set = res.set or t.set
  end
  info_queue[#info_queue+1] = t
end
'''
match_indent = true

# Add EventScenarios as a set to be localized here
[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''if _c.set == 'Other' then
        localize{type = 'other', key = _c.key, nodes = desc_nodes, vars = specific_vars or _c.vars}'''
position = 'after'
payload = '''
elseif _c.set == 'EventScenarios' or _c.set == 'hpot_jukebox' then
  localize{type = 'descriptions', key = _c.key, set = _c.set, nodes = desc_nodes, vars = specific_vars or _c.vars}
'''
match_indent = true

# Add Event badge
[[patches]]
[patches.pattern]
target = '''functions/UI_definitions.lua'''
pattern = '''if AUT.badges then'''
position = 'before'
payload = '''
if card.hpot_event_key then
  badges[#badges + 1] = create_badge(localize("hpot_event", "labels"), SMODS.Gradients["hpot_event"])
  SMODS.create_mod_badges(HotPotato.EventScenarios[card.hpot_event_key], badges)
end
if card.hpot_jukebox_key and not card.hpot_jukebox_none then
  local tag = JTJukebox.Music[card.hpot_jukebox_key]
  if not (tag.discoverable and not tag.discovered) then
    SMODS.create_mod_badges(JTJukebox.Music[card.hpot_jukebox_key], badges)
  end
end
'''
match_indent = true

# Why is this ipairs
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/ui.lua"]'''
pattern = '''for _, tab in ipairs(object_tabs) do'''
position = 'at'
payload = '''
for _, tab in pairs(object_tabs) do
'''
match_indent = true

# generate_ui for stickers :)))
[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = '''if first_pass and not (_c.set == 'Edition') and badges then'''
position = 'before'
payload = '''
if not full_UI_table.backup_card then
  full_UI_table.backup_card = card
end
if not first_pass and not (_c.set == 'Edition') and full_UI_table.badges then
  for k, v in ipairs(full_UI_table.badges) do
    local sticker = SMODS.Stickers[v]
    if sticker then
      if sticker.generate_ui then
        local specific_vars = specific_vars or {}
        sticker:generate_ui(info_queue, card or full_UI_table.backup_card, desc_nodes, specific_vars, full_UI_table)
      end
    end
  end
end
'''
match_indent = true