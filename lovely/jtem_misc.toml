[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'game.lua'
position = 'after'
pattern = '''self.GAME = saveTable and saveTable.GAME or self:init_game_object()'''
payload = '''
init_jtem(self.GAME)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''globals.lua'''
position = 'at'
pattern = '''VERSION = '1.0.1o'
VERSION = VERSION..'-FULL'
'''
payload = '''VERSION = '1.0.1o'
VERSION = VERSION..'-H0TP0T'
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
position = 'before'
pattern = '''if self.STATE == self.STATES.PLAY_TAROT then'''
payload = '''
if self.STATE == self.STATES.JTEM_PANDEMONIUM then
  PandemoniumGame.f.update(dt)
end

'''
match_indent = true

# Game:draw
[[patches]]
[patches.pattern]
target = 'game.lua'
position = 'after'
pattern = '''timer_checkpoint('uiboxes', 'draw')'''
payload = '''
if self.STATE == self.STATES.JTEM_PANDEMONIUM then
  PandemoniumGame.f.draw()
end

'''
match_indent = true

# I am so frustrated
[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
position = 'at'
pattern = '''if G.GAME.blind then t[#t + 1] = { object = G.GAME.blind, scored_card = G.GAME.blind.children.animatedSprite } end'''
payload = '''if G.GAME.blind and G.GAME.blind.is and G.GAME.blind:is(Blind) then t[#t + 1] = { object = G.GAME.blind, scored_card = G.GAME.blind.children.animatedSprite } end'''
match_indent = true

# Draggable UIBoxes
[[patches]]
[patches.pattern]
target = 'engine/ui.lua'
position = 'before'
pattern = '''if args.config.can_collide == nil then '''
payload = '''
if args.config.draggable then
  self.states.drag.can = true
end
'''
match_indent = true

# Jukebox music is prioritized
[[patches]]
[patches.pattern]
target = '''functions/misc_functions.lua'''
pattern = '''if G.F_SOUND_THREAD then
    G.SOUND_MANAGER.channel:push(G.ARGS.push)'''
position = 'before'
payload = '''
if JTJukebox.CurrentlyPlaying and JTJukebox.ActuallyPlaying then
	desired_track = JTJukebox.ActuallyPlaying
	G.ARGS.push.desired_track = desired_track
end
'''
match_indent = true


# make the hook hook properly i hope
[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''    if self.area then self.area:remove_card(self) end'''
position = 'before'
payload = '''
self.hp_area_back = self.area
'''
match_indent = true
[[patches]]
[patches.pattern]
target = '''card.lua'''
pattern = '''        if self.ability.d_size > 0 then
            G.GAME.round_resets.discards = G.GAME.round_resets.discards - self.ability.d_size'''
position = 'before'
payload = '''
if self.hp_area_back and not self.hp_area_back.REMOVED then
    SMODS.calculate_context{ hp_card_destroyed = true, card_being_destroyed = self, is_being_sold = self.HP_JTEM_IS_BEING_SOLD, area = self.hp_area_back }
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/ui.lua"]'''
pattern = '''{n=G.UIT.R, config={align = "cm", r = 0.1, colour = G.C.BLACK, emboss = 0.05}, nodes=deck_tables}, '''
position = 'before'
payload = '''
args.hp_misc_elements and args.hp_misc_elements() or nil, 
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = '''reset_castle_card()  '''
position = 'after'
payload = '''
G.GAME.hp_jtem_already_requested_this_ante = nil
'''
match_indent = true

# We add the mod badge to mood stickers
# Taken from Paperback
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "badges.mod_set = nil"
position = "before"
match_indent = true
payload = '''
if card and card.ability then
  local key = hpot_has_mood(card)
  if key then
    SMODS.create_mod_badges(SMODS.Stickers[key], badges)
  end
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self.children.use_button = UIBox{'''
position = "before"
match_indent = true
payload = '''
G.hpot_training_consumable_highlighted = nil
if self.ability.hpot_train_increase and self.highlighted and self.ability.consumeable then
  -- set this as the highlighted consumeable
  G.hpot_training_consumable_highlighted = self
  --print("hi")
end
if self.ability.set == "Joker" and not self.ability.hp_jtem_mood then
  self.children.hpot_train_button = UIBox{
    definition = hpot_joker_train_button_definition(self), 
    config = {
      align = "bmi", 
      offset ={x=0,y=0.45},
      parent = self
    }
  }
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self.children.use_button:remove()'''
position = "before"
match_indent = true
payload = '''
if self.ability.consumeable then
  G.hpot_training_consumable_highlighted = nil
end
if self.children.hpot_train_button then
  self.children.hpot_train_button:remove()
  self.children.hpot_train_button = nil
end
'''